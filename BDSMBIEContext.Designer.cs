//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer for SQL Server tool using LINQ to SQL template.
// Code is generated on: 07.03.2021 6:27:40
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace BDSystemSMBIEContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "BDSystemSMBIE")]
    public partial class BDSystemSMBIEDataContext : System.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new System.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();

        partial void InsertBSLink(BSLink instance);
        partial void UpdateBSLink(BSLink instance);
        partial void DeleteBSLink(BSLink instance);
        partial void InsertDepartment(Department instance);
        partial void UpdateDepartment(Department instance);
        partial void DeleteDepartment(Department instance);
        partial void InsertDocument(Document instance);
        partial void UpdateDocument(Document instance);
        partial void DeleteDocument(Document instance);
        partial void InsertFolder(Folder instance);
        partial void UpdateFolder(Folder instance);
        partial void DeleteFolder(Folder instance);
        partial void InsertFolderFile(FolderFile instance);
        partial void UpdateFolderFile(FolderFile instance);
        partial void DeleteFolderFile(FolderFile instance);
        partial void InsertPosition(Position instance);
        partial void UpdatePosition(Position instance);
        partial void DeletePosition(Position instance);
        partial void InsertRecordField(RecordField instance);
        partial void UpdateRecordField(RecordField instance);
        partial void DeleteRecordField(RecordField instance);
        partial void InsertRelationship(Relationship instance);
        partial void UpdateRelationship(Relationship instance);
        partial void DeleteRelationship(Relationship instance);
        partial void InsertTypeDepartment(TypeDepartment instance);
        partial void UpdateTypeDepartment(TypeDepartment instance);
        partial void DeleteTypeDepartment(TypeDepartment instance);
        partial void InsertTypeRecord(TypeRecord instance);
        partial void UpdateTypeRecord(TypeRecord instance);
        partial void DeleteTypeRecord(TypeRecord instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public BDSystemSMBIEDataContext() :
        base(GetConnectionString("BDSystemSMBIEDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public BDSystemSMBIEDataContext(System.Data.Linq.Mapping.MappingSource mappingSource) :
        base(GetConnectionString("BDSystemSMBIEDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName) 
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public BDSystemSMBIEDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BDSystemSMBIEDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BDSystemSMBIEDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BDSystemSMBIEDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public System.Data.Linq.Table<BSLink> BSLinks
        {
            get
            {
                return this.GetTable<BSLink>();
            }
        }

        public System.Data.Linq.Table<Department> Departments
        {
            get
            {
                return this.GetTable<Department>();
            }
        }

        public System.Data.Linq.Table<Document> Documents
        {
            get
            {
                return this.GetTable<Document>();
            }
        }

        public System.Data.Linq.Table<Folder> Folders
        {
            get
            {
                return this.GetTable<Folder>();
            }
        }

        public System.Data.Linq.Table<FolderFile> FolderFiles
        {
            get
            {
                return this.GetTable<FolderFile>();
            }
        }

        public System.Data.Linq.Table<Position> Positions
        {
            get
            {
                return this.GetTable<Position>();
            }
        }

        public System.Data.Linq.Table<RecordField> RecordFields
        {
            get
            {
                return this.GetTable<RecordField>();
            }
        }

        public System.Data.Linq.Table<Relationship> Relationships
        {
            get
            {
                return this.GetTable<Relationship>();
            }
        }

        public System.Data.Linq.Table<TypeDepartment> TypeDepartments
        {
            get
            {
                return this.GetTable<TypeDepartment>();
            }
        }

        public System.Data.Linq.Table<TypeRecord> TypeRecords
        {
            get
            {
                return this.GetTable<TypeRecord>();
            }
        }

        public System.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace BDSystemSMBIEContext
{

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.BSLink in the schema.
    /// </summary>
    [Table(Name = @"dbo.BSLink")]
    public partial class BSLink : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _IdRecord;

        private int? _IdFile;

        private string _Private;

        private string _DataJson;
        #pragma warning restore 0649

        private EntityRef<Document> _Document;

        private EntityRef<TypeRecord> _TypeRecord;

        private EntitySet<FolderFile> _FolderFiles;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdRecordChanging(int value);
        partial void OnIdRecordChanged();
        partial void OnIdFileChanging(int? value);
        partial void OnIdFileChanged();
        partial void OnPrivateChanging(string value);
        partial void OnPrivateChanged();
        partial void OnDataJsonChanging(string value);
        partial void OnDataJsonChanged();
        #endregion

        public BSLink()
        {
            this._Document  = default(EntityRef<Document>);
            this._TypeRecord  = default(EntityRef<TypeRecord>);
            this._FolderFiles = new EntitySet<FolderFile>(new Action<FolderFile>(this.attach_FolderFiles), new Action<FolderFile>(this.detach_FolderFiles));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdRecord in the schema.
        /// </summary>
        [Column(Name = @"id_Record", Storage = "_IdRecord", CanBeNull = false, DbType = "INT NOT NULL")]
        public int IdRecord
        {
            get
            {
                return this._IdRecord;
            }
            set
            {
                if (this._IdRecord != value)
                {
                    if (this._TypeRecord.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdRecordChanging(value);
                    this.SendPropertyChanging("IdRecord");
                    this._IdRecord = value;
                    this.SendPropertyChanged("IdRecord");
                    this.OnIdRecordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdFile in the schema.
        /// </summary>
        [Column(Name = @"id_file", Storage = "_IdFile", DbType = "INT")]
        public int? IdFile
        {
            get
            {
                return this._IdFile;
            }
            set
            {
                if (this._IdFile != value)
                {
                    if (this._Document.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdFileChanging(value);
                    this.SendPropertyChanging("IdFile");
                    this._IdFile = value;
                    this.SendPropertyChanged("IdFile");
                    this.OnIdFileChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Private in the schema.
        /// </summary>
        [Column(Name = @"private", Storage = "_Private", DbType = "CHAR(1)")]
        public string Private
        {
            get
            {
                return this._Private;
            }
            set
            {
                if (this._Private != value)
                {
                    this.OnPrivateChanging(value);
                    this.SendPropertyChanging("Private");
                    this._Private = value;
                    this.SendPropertyChanged("Private");
                    this.OnPrivateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataJson in the schema.
        /// </summary>
        [Column(Storage = "_DataJson", CanBeNull = false, DbType = "NVARCHAR(MAX) NOT NULL")]
        public string DataJson
        {
            get
            {
                return this._DataJson;
            }
            set
            {
                if (this._DataJson != value)
                {
                    this.OnDataJsonChanging(value);
                    this.SendPropertyChanging("DataJson");
                    this._DataJson = value;
                    this.SendPropertyChanged("DataJson");
                    this.OnDataJsonChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [Association(Name="Document_BSLink", Storage="_Document", ThisKey="IdFile", OtherKey="Id", IsForeignKey=true)]
        public Document Document
        {
            get
            {
                return this._Document.Entity;
            }
            set
            {
                Document previousValue = this._Document.Entity;
                if ((previousValue != value) || (this._Document.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Document");
                    if (previousValue != null)
                    {
                        this._Document.Entity = null;
                        previousValue.BSLinks.Remove(this);
                    }
                    this._Document.Entity = value;
                    if (value != null)
                    {
                        this._IdFile = value.Id;
                        value.BSLinks.Add(this);
                    }
                    else
                    {
                        this._IdFile = default(int?);
                    }
                    this.SendPropertyChanged("Document");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeRecord in the schema.
        /// </summary>
        [Association(Name="TypeRecord_BSLink", Storage="_TypeRecord", ThisKey="IdRecord", OtherKey="Id", IsForeignKey=true)]
        public TypeRecord TypeRecord
        {
            get
            {
                return this._TypeRecord.Entity;
            }
            set
            {
                TypeRecord previousValue = this._TypeRecord.Entity;
                if ((previousValue != value) || (this._TypeRecord.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TypeRecord");
                    if (previousValue != null)
                    {
                        this._TypeRecord.Entity = null;
                        previousValue.BSLinks.Remove(this);
                    }
                    this._TypeRecord.Entity = value;
                    if (value != null)
                    {
                        this._IdRecord = value.Id;
                        value.BSLinks.Add(this);
                    }
                    else
                    {
                        this._IdRecord = default(int);
                    }
                    this.SendPropertyChanged("TypeRecord");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderFiles in the schema.
        /// </summary>
        [Association(Name="BSLink_FolderFile", Storage="_FolderFiles", ThisKey="Id", OtherKey="IdBSlink", DeleteRule="CASCADE")]
        public EntitySet<FolderFile> FolderFiles
        {
            get
            {
                return this._FolderFiles;
            }
            set
            {
                this._FolderFiles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_FolderFiles(FolderFile entity)
        {
            this.SendPropertyChanging();
            entity.BSLink = this;
        }
    
        private void detach_FolderFiles(FolderFile entity)
        {
            this.SendPropertyChanging();
            entity.BSLink = null;
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.Department in the schema.
    /// </summary>
    [Table(Name = @"dbo.Department")]
    public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _IdType;

        private string _Name;

        private string _Description;

        private int? _IdUserHead;

        private int? _IdParentDep;
        #pragma warning restore 0649

        private EntityRef<TypeDepartment> _TypeDepartment;

        private EntitySet<User> _Users;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdTypeChanging(int value);
        partial void OnIdTypeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIdUserHeadChanging(int? value);
        partial void OnIdUserHeadChanged();
        partial void OnIdParentDepChanging(int? value);
        partial void OnIdParentDepChanged();
        #endregion

        public Department()
        {
            this._TypeDepartment  = default(EntityRef<TypeDepartment>);
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdType in the schema.
        /// </summary>
        [Column(Name = @"id_type", Storage = "_IdType", CanBeNull = false, DbType = "INT NOT NULL")]
        public int IdType
        {
            get
            {
                return this._IdType;
            }
            set
            {
                if (this._IdType != value)
                {
                    if (this._TypeDepartment.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdTypeChanging(value);
                    this.SendPropertyChanging("IdType");
                    this._IdType = value;
                    this.SendPropertyChanged("IdType");
                    this.OnIdTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR(256) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVARCHAR(MAX)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUserHead in the schema.
        /// </summary>
        [Column(Name = @"id_user_head", Storage = "_IdUserHead", DbType = "INT")]
        public int? IdUserHead
        {
            get
            {
                return this._IdUserHead;
            }
            set
            {
                if (this._IdUserHead != value)
                {
                    this.OnIdUserHeadChanging(value);
                    this.SendPropertyChanging("IdUserHead");
                    this._IdUserHead = value;
                    this.SendPropertyChanged("IdUserHead");
                    this.OnIdUserHeadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdParentDep in the schema.
        /// </summary>
        [Column(Name = @"id_parent_dep", Storage = "_IdParentDep", DbType = "INT")]
        public int? IdParentDep
        {
            get
            {
                return this._IdParentDep;
            }
            set
            {
                if (this._IdParentDep != value)
                {
                    this.OnIdParentDepChanging(value);
                    this.SendPropertyChanging("IdParentDep");
                    this._IdParentDep = value;
                    this.SendPropertyChanged("IdParentDep");
                    this.OnIdParentDepChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeDepartment in the schema.
        /// </summary>
        [Association(Name="TypeDepartment_Department", Storage="_TypeDepartment", ThisKey="IdType", OtherKey="Id", IsForeignKey=true)]
        public TypeDepartment TypeDepartment
        {
            get
            {
                return this._TypeDepartment.Entity;
            }
            set
            {
                TypeDepartment previousValue = this._TypeDepartment.Entity;
                if ((previousValue != value) || (this._TypeDepartment.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TypeDepartment");
                    if (previousValue != null)
                    {
                        this._TypeDepartment.Entity = null;
                        previousValue.Departments.Remove(this);
                    }
                    this._TypeDepartment.Entity = value;
                    if (value != null)
                    {
                        this._IdType = value.Id;
                        value.Departments.Add(this);
                    }
                    else
                    {
                        this._IdType = default(int);
                    }
                    this.SendPropertyChanged("TypeDepartment");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Association(Name="Department_User", Storage="_Users", ThisKey="Id", OtherKey="IdDep", DeleteRule="SET NULL")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging();
            entity.Department = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging();
            entity.Department = null;
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.Document in the schema.
    /// </summary>
    [Table(Name = @"dbo.Document")]
    public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private byte[] _DataFile;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<BSLink> _BSLinks;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnDataFileChanging(byte[] value);
        partial void OnDataFileChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Document()
        {
            this._BSLinks = new EntitySet<BSLink>(new Action<BSLink>(this.attach_BSLinks), new Action<BSLink>(this.detach_BSLinks));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataFile in the schema.
        /// </summary>
        [Column(Storage = "_DataFile", CanBeNull = false, DbType = "VARBINARY(MAX) NOT NULL")]
        public byte[] DataFile
        {
            get
            {
                return this._DataFile;
            }
            set
            {
                if (this._DataFile != value)
                {
                    this.OnDataFileChanging(value);
                    this.SendPropertyChanging("DataFile");
                    this._DataFile = value;
                    this.SendPropertyChanged("DataFile");
                    this.OnDataFileChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR(256) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BSLinks in the schema.
        /// </summary>
        [Association(Name="Document_BSLink", Storage="_BSLinks", ThisKey="Id", OtherKey="IdFile", DeleteRule="SET NULL")]
        public EntitySet<BSLink> BSLinks
        {
            get
            {
                return this._BSLinks;
            }
            set
            {
                this._BSLinks.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BSLinks(BSLink entity)
        {
            this.SendPropertyChanging();
            entity.Document = this;
        }
    
        private void detach_BSLinks(BSLink entity)
        {
            this.SendPropertyChanging();
            entity.Document = null;
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.Folder in the schema.
    /// </summary>
    [Table(Name = @"dbo.Folder")]
    public partial class Folder : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _IdParent;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<FolderFile> _FolderFiles;

        private EntitySet<User> _Users;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdParentChanging(int value);
        partial void OnIdParentChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Folder()
        {
            this._FolderFiles = new EntitySet<FolderFile>(new Action<FolderFile>(this.attach_FolderFiles), new Action<FolderFile>(this.detach_FolderFiles));
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdParent in the schema.
        /// </summary>
        [Column(Name = @"Id_parent", Storage = "_IdParent", CanBeNull = false, DbType = "INT NOT NULL")]
        public int IdParent
        {
            get
            {
                return this._IdParent;
            }
            set
            {
                if (this._IdParent != value)
                {
                    this.OnIdParentChanging(value);
                    this.SendPropertyChanging("IdParent");
                    this._IdParent = value;
                    this.SendPropertyChanged("IdParent");
                    this.OnIdParentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", DbType = "NVARCHAR(256)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FolderFiles in the schema.
        /// </summary>
        [Association(Name="Folder_FolderFile", Storage="_FolderFiles", ThisKey="Id", OtherKey="IdFolder", DeleteRule="CASCADE")]
        public EntitySet<FolderFile> FolderFiles
        {
            get
            {
                return this._FolderFiles;
            }
            set
            {
                this._FolderFiles.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Association(Name="Folder_User", Storage="_Users", ThisKey="Id", OtherKey="IdMainFolder", DeleteRule="CASCADE")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_FolderFiles(FolderFile entity)
        {
            this.SendPropertyChanging();
            entity.Folder = this;
        }
    
        private void detach_FolderFiles(FolderFile entity)
        {
            this.SendPropertyChanging();
            entity.Folder = null;
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging();
            entity.Folder = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging();
            entity.Folder = null;
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.FolderFile in the schema.
    /// </summary>
    [Table(Name = @"dbo.FolderFile")]
    public partial class FolderFile : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _IdFolder;

        private int _IdBSlink;
        #pragma warning restore 0649

        private EntityRef<BSLink> _BSLink;

        private EntityRef<Folder> _Folder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdFolderChanging(int value);
        partial void OnIdFolderChanged();
        partial void OnIdBSlinkChanging(int value);
        partial void OnIdBSlinkChanged();
        #endregion

        public FolderFile()
        {
            this._BSLink  = default(EntityRef<BSLink>);
            this._Folder  = default(EntityRef<Folder>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdFolder in the schema.
        /// </summary>
        [Column(Name = @"id_folder", Storage = "_IdFolder", CanBeNull = false, DbType = "INT NOT NULL")]
        public int IdFolder
        {
            get
            {
                return this._IdFolder;
            }
            set
            {
                if (this._IdFolder != value)
                {
                    if (this._Folder.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdFolderChanging(value);
                    this.SendPropertyChanging("IdFolder");
                    this._IdFolder = value;
                    this.SendPropertyChanged("IdFolder");
                    this.OnIdFolderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdBSlink in the schema.
        /// </summary>
        [Column(Name = @"id_BSlink", Storage = "_IdBSlink", CanBeNull = false, DbType = "INT NOT NULL")]
        public int IdBSlink
        {
            get
            {
                return this._IdBSlink;
            }
            set
            {
                if (this._IdBSlink != value)
                {
                    if (this._BSLink.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdBSlinkChanging(value);
                    this.SendPropertyChanging("IdBSlink");
                    this._IdBSlink = value;
                    this.SendPropertyChanged("IdBSlink");
                    this.OnIdBSlinkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BSLink in the schema.
        /// </summary>
        [Association(Name="BSLink_FolderFile", Storage="_BSLink", ThisKey="IdBSlink", OtherKey="Id", IsForeignKey=true)]
        public BSLink BSLink
        {
            get
            {
                return this._BSLink.Entity;
            }
            set
            {
                BSLink previousValue = this._BSLink.Entity;
                if ((previousValue != value) || (this._BSLink.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("BSLink");
                    if (previousValue != null)
                    {
                        this._BSLink.Entity = null;
                        previousValue.FolderFiles.Remove(this);
                    }
                    this._BSLink.Entity = value;
                    if (value != null)
                    {
                        this._IdBSlink = value.Id;
                        value.FolderFiles.Add(this);
                    }
                    else
                    {
                        this._IdBSlink = default(int);
                    }
                    this.SendPropertyChanged("BSLink");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Folder in the schema.
        /// </summary>
        [Association(Name="Folder_FolderFile", Storage="_Folder", ThisKey="IdFolder", OtherKey="Id", IsForeignKey=true)]
        public Folder Folder
        {
            get
            {
                return this._Folder.Entity;
            }
            set
            {
                Folder previousValue = this._Folder.Entity;
                if ((previousValue != value) || (this._Folder.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Folder");
                    if (previousValue != null)
                    {
                        this._Folder.Entity = null;
                        previousValue.FolderFiles.Remove(this);
                    }
                    this._Folder.Entity = value;
                    if (value != null)
                    {
                        this._IdFolder = value.Id;
                        value.FolderFiles.Add(this);
                    }
                    else
                    {
                        this._IdFolder = default(int);
                    }
                    this.SendPropertyChanged("Folder");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.Position in the schema.
    /// </summary>
    [Table(Name = @"dbo.Position")]
    public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private int _Rang;

        private string _Description;
        #pragma warning restore 0649

        private EntitySet<TypeDepartment> _TypeDepartments;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRangChanging(int value);
        partial void OnRangChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public Position()
        {
            this._TypeDepartments = new EntitySet<TypeDepartment>(new Action<TypeDepartment>(this.attach_TypeDepartments), new Action<TypeDepartment>(this.detach_TypeDepartments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Rang in the schema.
        /// </summary>
        [Column(Storage = "_Rang", CanBeNull = false, DbType = "INT NOT NULL")]
        public int Rang
        {
            get
            {
                return this._Rang;
            }
            set
            {
                if (this._Rang != value)
                {
                    this.OnRangChanging(value);
                    this.SendPropertyChanging("Rang");
                    this._Rang = value;
                    this.SendPropertyChanged("Rang");
                    this.OnRangChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVARCHAR(500)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeDepartments in the schema.
        /// </summary>
        [Association(Name="Position_TypeDepartment", Storage="_TypeDepartments", ThisKey="Id", OtherKey="RuleIdPosition", DeleteRule="SET NULL")]
        public EntitySet<TypeDepartment> TypeDepartments
        {
            get
            {
                return this._TypeDepartments;
            }
            set
            {
                this._TypeDepartments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_TypeDepartments(TypeDepartment entity)
        {
            this.SendPropertyChanging();
            entity.Position = this;
        }
    
        private void detach_TypeDepartments(TypeDepartment entity)
        {
            this.SendPropertyChanging();
            entity.Position = null;
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.RecordField in the schema.
    /// </summary>
    [Table(Name = @"dbo.RecordFields")]
    public partial class RecordField : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private string _Description;

        private string _Sysname;
        #pragma warning restore 0649

        private EntitySet<Relationship> _Relationships;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSysnameChanging(string value);
        partial void OnSysnameChanged();
        #endregion

        public RecordField()
        {
            this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "NVARCHAR(256) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sysname in the schema.
        /// </summary>
        [Column(Storage = "_Sysname", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL")]
        public string Sysname
        {
            get
            {
                return this._Sysname;
            }
            set
            {
                if (this._Sysname != value)
                {
                    this.OnSysnameChanging(value);
                    this.SendPropertyChanging("Sysname");
                    this._Sysname = value;
                    this.SendPropertyChanged("Sysname");
                    this.OnSysnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Relationships in the schema.
        /// </summary>
        [Association(Name="RecordField_Relationship", Storage="_Relationships", ThisKey="Id", OtherKey="IdField", DeleteRule="CASCADE")]
        public EntitySet<Relationship> Relationships
        {
            get
            {
                return this._Relationships;
            }
            set
            {
                this._Relationships.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Relationships(Relationship entity)
        {
            this.SendPropertyChanging();
            entity.RecordField = this;
        }
    
        private void detach_Relationships(Relationship entity)
        {
            this.SendPropertyChanging();
            entity.RecordField = null;
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.Relationship in the schema.
    /// </summary>
    [Table(Name = @"dbo.Relationship")]
    public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _IdField;

        private int _IdType;

        private int _Typefielder;
        #pragma warning restore 0649

        private EntityRef<RecordField> _RecordField;

        private EntityRef<TypeRecord> _TypeRecord;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdFieldChanging(int value);
        partial void OnIdFieldChanged();
        partial void OnIdTypeChanging(int value);
        partial void OnIdTypeChanged();
        partial void OnTypefielderChanging(int value);
        partial void OnTypefielderChanged();
        #endregion

        public Relationship()
        {
            this._RecordField  = default(EntityRef<RecordField>);
            this._TypeRecord  = default(EntityRef<TypeRecord>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdField in the schema.
        /// </summary>
        [Column(Name = @"Id_field", Storage = "_IdField", CanBeNull = false, DbType = "INT NOT NULL")]
        public int IdField
        {
            get
            {
                return this._IdField;
            }
            set
            {
                if (this._IdField != value)
                {
                    if (this._RecordField.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdFieldChanging(value);
                    this.SendPropertyChanging("IdField");
                    this._IdField = value;
                    this.SendPropertyChanged("IdField");
                    this.OnIdFieldChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdType in the schema.
        /// </summary>
        [Column(Name = @"Id_type", Storage = "_IdType", CanBeNull = false, DbType = "INT NOT NULL")]
        public int IdType
        {
            get
            {
                return this._IdType;
            }
            set
            {
                if (this._IdType != value)
                {
                    if (this._TypeRecord.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdTypeChanging(value);
                    this.SendPropertyChanging("IdType");
                    this._IdType = value;
                    this.SendPropertyChanged("IdType");
                    this.OnIdTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Typefielder in the schema.
        /// </summary>
        [Column(Name = @"typefielder", Storage = "_Typefielder", CanBeNull = false, DbType = "INT NOT NULL")]
        public int Typefielder
        {
            get
            {
                return this._Typefielder;
            }
            set
            {
                if (this._Typefielder != value)
                {
                    this.OnTypefielderChanging(value);
                    this.SendPropertyChanging("Typefielder");
                    this._Typefielder = value;
                    this.SendPropertyChanged("Typefielder");
                    this.OnTypefielderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecordField in the schema.
        /// </summary>
        [Association(Name="RecordField_Relationship", Storage="_RecordField", ThisKey="IdField", OtherKey="Id", IsForeignKey=true)]
        public RecordField RecordField
        {
            get
            {
                return this._RecordField.Entity;
            }
            set
            {
                RecordField previousValue = this._RecordField.Entity;
                if ((previousValue != value) || (this._RecordField.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("RecordField");
                    if (previousValue != null)
                    {
                        this._RecordField.Entity = null;
                        previousValue.Relationships.Remove(this);
                    }
                    this._RecordField.Entity = value;
                    if (value != null)
                    {
                        this._IdField = value.Id;
                        value.Relationships.Add(this);
                    }
                    else
                    {
                        this._IdField = default(int);
                    }
                    this.SendPropertyChanged("RecordField");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TypeRecord in the schema.
        /// </summary>
        [Association(Name="TypeRecord_Relationship", Storage="_TypeRecord", ThisKey="IdType", OtherKey="Id", IsForeignKey=true)]
        public TypeRecord TypeRecord
        {
            get
            {
                return this._TypeRecord.Entity;
            }
            set
            {
                TypeRecord previousValue = this._TypeRecord.Entity;
                if ((previousValue != value) || (this._TypeRecord.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TypeRecord");
                    if (previousValue != null)
                    {
                        this._TypeRecord.Entity = null;
                        previousValue.Relationships.Remove(this);
                    }
                    this._TypeRecord.Entity = value;
                    if (value != null)
                    {
                        this._IdType = value.Id;
                        value.Relationships.Add(this);
                    }
                    else
                    {
                        this._IdType = default(int);
                    }
                    this.SendPropertyChanged("TypeRecord");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.TypeDepartment in the schema.
    /// </summary>
    [Table(Name = @"dbo.TypeDepartment")]
    public partial class TypeDepartment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private string _Description;

        private int? _RuleIdPosition;

        private int? _IdParent;
        #pragma warning restore 0649

        private EntitySet<Department> _Departments;

        private EntityRef<Position> _Position;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnRuleIdPositionChanging(int? value);
        partial void OnRuleIdPositionChanged();
        partial void OnIdParentChanging(int? value);
        partial void OnIdParentChanged();
        #endregion

        public TypeDepartment()
        {
            this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
            this._Position  = default(EntityRef<Position>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVARCHAR(MAX)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RuleIdPosition in the schema.
        /// </summary>
        [Column(Storage = "_RuleIdPosition", DbType = "INT")]
        public int? RuleIdPosition
        {
            get
            {
                return this._RuleIdPosition;
            }
            set
            {
                if (this._RuleIdPosition != value)
                {
                    if (this._Position.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRuleIdPositionChanging(value);
                    this.SendPropertyChanging("RuleIdPosition");
                    this._RuleIdPosition = value;
                    this.SendPropertyChanged("RuleIdPosition");
                    this.OnRuleIdPositionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdParent in the schema.
        /// </summary>
        [Column(Name = @"id_parent", Storage = "_IdParent", DbType = "INT")]
        public int? IdParent
        {
            get
            {
                return this._IdParent;
            }
            set
            {
                if (this._IdParent != value)
                {
                    this.OnIdParentChanging(value);
                    this.SendPropertyChanging("IdParent");
                    this._IdParent = value;
                    this.SendPropertyChanged("IdParent");
                    this.OnIdParentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Departments in the schema.
        /// </summary>
        [Association(Name="TypeDepartment_Department", Storage="_Departments", ThisKey="Id", OtherKey="IdType", DeleteRule="CASCADE")]
        public EntitySet<Department> Departments
        {
            get
            {
                return this._Departments;
            }
            set
            {
                this._Departments.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Position in the schema.
        /// </summary>
        [Association(Name="Position_TypeDepartment", Storage="_Position", ThisKey="RuleIdPosition", OtherKey="Id", IsForeignKey=true)]
        public Position Position
        {
            get
            {
                return this._Position.Entity;
            }
            set
            {
                Position previousValue = this._Position.Entity;
                if ((previousValue != value) || (this._Position.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Position");
                    if (previousValue != null)
                    {
                        this._Position.Entity = null;
                        previousValue.TypeDepartments.Remove(this);
                    }
                    this._Position.Entity = value;
                    if (value != null)
                    {
                        this._RuleIdPosition = value.Id;
                        value.TypeDepartments.Add(this);
                    }
                    else
                    {
                        this._RuleIdPosition = default(int?);
                    }
                    this.SendPropertyChanged("Position");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Departments(Department entity)
        {
            this.SendPropertyChanging();
            entity.TypeDepartment = this;
        }
    
        private void detach_Departments(Department entity)
        {
            this.SendPropertyChanging();
            entity.TypeDepartment = null;
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.TypeRecord in the schema.
    /// </summary>
    [Table(Name = @"dbo.TypeRecords")]
    public partial class TypeRecord : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private string _Description;

        private string _Sysname;
        #pragma warning restore 0649

        private EntitySet<BSLink> _BSLinks;

        private EntitySet<Relationship> _Relationships;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSysnameChanging(string value);
        partial void OnSysnameChanged();
        #endregion

        public TypeRecord()
        {
            this._BSLinks = new EntitySet<BSLink>(new Action<BSLink>(this.attach_BSLinks), new Action<BSLink>(this.detach_BSLinks));
            this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "NVARCHAR(256) NOT NULL")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sysname in the schema.
        /// </summary>
        [Column(Storage = "_Sysname", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL")]
        public string Sysname
        {
            get
            {
                return this._Sysname;
            }
            set
            {
                if (this._Sysname != value)
                {
                    this.OnSysnameChanging(value);
                    this.SendPropertyChanging("Sysname");
                    this._Sysname = value;
                    this.SendPropertyChanged("Sysname");
                    this.OnSysnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BSLinks in the schema.
        /// </summary>
        [Association(Name="TypeRecord_BSLink", Storage="_BSLinks", ThisKey="Id", OtherKey="IdRecord", DeleteRule="CASCADE")]
        public EntitySet<BSLink> BSLinks
        {
            get
            {
                return this._BSLinks;
            }
            set
            {
                this._BSLinks.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Relationships in the schema.
        /// </summary>
        [Association(Name="TypeRecord_Relationship", Storage="_Relationships", ThisKey="Id", OtherKey="IdType", DeleteRule="CASCADE")]
        public EntitySet<Relationship> Relationships
        {
            get
            {
                return this._Relationships;
            }
            set
            {
                this._Relationships.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BSLinks(BSLink entity)
        {
            this.SendPropertyChanging();
            entity.TypeRecord = this;
        }
    
        private void detach_BSLinks(BSLink entity)
        {
            this.SendPropertyChanging();
            entity.TypeRecord = null;
        }

        private void attach_Relationships(Relationship entity)
        {
            this.SendPropertyChanging();
            entity.TypeRecord = this;
        }
    
        private void detach_Relationships(Relationship entity)
        {
            this.SendPropertyChanging();
            entity.TypeRecord = null;
        }
    }

    /// <summary>
    /// There are no comments for BDSystemSMBIEContext.User in the schema.
    /// </summary>
    [Table(Name = @"dbo.[User]")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _FIO;

        private int _IdMainFolder;

        private string _Phone;

        private string _Character;

        private string _Login;

        private string _Password;

        private string _Token;

        private System.DateTime? _Datatime;

        private int? _IdDep;
        #pragma warning restore 0649

        private EntityRef<Department> _Department;

        private EntityRef<Folder> _Folder;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnFIOChanging(string value);
        partial void OnFIOChanged();
        partial void OnIdMainFolderChanging(int value);
        partial void OnIdMainFolderChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnCharacterChanging(string value);
        partial void OnCharacterChanged();
        partial void OnLoginChanging(string value);
        partial void OnLoginChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnTokenChanging(string value);
        partial void OnTokenChanged();
        partial void OnDatatimeChanging(System.DateTime? value);
        partial void OnDatatimeChanged();
        partial void OnIdDepChanging(int? value);
        partial void OnIdDepChanged();
        #endregion

        public User()
        {
            this._Department  = default(EntityRef<Department>);
            this._Folder  = default(EntityRef<Folder>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FIO in the schema.
        /// </summary>
        [Column(Storage = "_FIO", CanBeNull = false, DbType = "NVARCHAR(250) NOT NULL")]
        public string FIO
        {
            get
            {
                return this._FIO;
            }
            set
            {
                if (this._FIO != value)
                {
                    this.OnFIOChanging(value);
                    this.SendPropertyChanging("FIO");
                    this._FIO = value;
                    this.SendPropertyChanged("FIO");
                    this.OnFIOChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdMainFolder in the schema.
        /// </summary>
        [Column(Name = @"id_Main_Folder", Storage = "_IdMainFolder", CanBeNull = false, DbType = "INT NOT NULL")]
        public int IdMainFolder
        {
            get
            {
                return this._IdMainFolder;
            }
            set
            {
                if (this._IdMainFolder != value)
                {
                    if (this._Folder.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdMainFolderChanging(value);
                    this.SendPropertyChanging("IdMainFolder");
                    this._IdMainFolder = value;
                    this.SendPropertyChanged("IdMainFolder");
                    this.OnIdMainFolderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Storage = "_Phone", CanBeNull = false, DbType = "NVARCHAR(11) NOT NULL")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging("Phone");
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Character in the schema.
        /// </summary>
        [Column(Storage = "_Character", CanBeNull = false, DbType = "NVARCHAR(MAX) NOT NULL")]
        public string Character
        {
            get
            {
                return this._Character;
            }
            set
            {
                if (this._Character != value)
                {
                    this.OnCharacterChanging(value);
                    this.SendPropertyChanging("Character");
                    this._Character = value;
                    this.SendPropertyChanged("Character");
                    this.OnCharacterChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Login in the schema.
        /// </summary>
        [Column(Storage = "_Login", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL")]
        public string Login
        {
            get
            {
                return this._Login;
            }
            set
            {
                if (this._Login != value)
                {
                    this.OnLoginChanging(value);
                    this.SendPropertyChanging("Login");
                    this._Login = value;
                    this.SendPropertyChanged("Login");
                    this.OnLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL")]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Token in the schema.
        /// </summary>
        [Column(Storage = "_Token", DbType = "NVARCHAR(MAX)")]
        public string Token
        {
            get
            {
                return this._Token;
            }
            set
            {
                if (this._Token != value)
                {
                    this.OnTokenChanging(value);
                    this.SendPropertyChanging("Token");
                    this._Token = value;
                    this.SendPropertyChanged("Token");
                    this.OnTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Datatime in the schema.
        /// </summary>
        [Column(Name = @"datatime", Storage = "_Datatime", DbType = "DATETIME")]
        public System.DateTime? Datatime
        {
            get
            {
                return this._Datatime;
            }
            set
            {
                if (this._Datatime != value)
                {
                    this.OnDatatimeChanging(value);
                    this.SendPropertyChanging("Datatime");
                    this._Datatime = value;
                    this.SendPropertyChanged("Datatime");
                    this.OnDatatimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdDep in the schema.
        /// </summary>
        [Column(Name = @"id_dep", Storage = "_IdDep", DbType = "INT")]
        public int? IdDep
        {
            get
            {
                return this._IdDep;
            }
            set
            {
                if (this._IdDep != value)
                {
                    if (this._Department.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdDepChanging(value);
                    this.SendPropertyChanging("IdDep");
                    this._IdDep = value;
                    this.SendPropertyChanged("IdDep");
                    this.OnIdDepChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Department in the schema.
        /// </summary>
        [Association(Name="Department_User", Storage="_Department", ThisKey="IdDep", OtherKey="Id", IsForeignKey=true)]
        public Department Department
        {
            get
            {
                return this._Department.Entity;
            }
            set
            {
                Department previousValue = this._Department.Entity;
                if ((previousValue != value) || (this._Department.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Department");
                    if (previousValue != null)
                    {
                        this._Department.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Department.Entity = value;
                    if (value != null)
                    {
                        this._IdDep = value.Id;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._IdDep = default(int?);
                    }
                    this.SendPropertyChanged("Department");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Folder in the schema.
        /// </summary>
        [Association(Name="Folder_User", Storage="_Folder", ThisKey="IdMainFolder", OtherKey="Id", IsForeignKey=true)]
        public Folder Folder
        {
            get
            {
                return this._Folder.Entity;
            }
            set
            {
                Folder previousValue = this._Folder.Entity;
                if ((previousValue != value) || (this._Folder.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Folder");
                    if (previousValue != null)
                    {
                        this._Folder.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Folder.Entity = value;
                    if (value != null)
                    {
                        this._IdMainFolder = value.Id;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._IdMainFolder = default(int);
                    }
                    this.SendPropertyChanged("Folder");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
